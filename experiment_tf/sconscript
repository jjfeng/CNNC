import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

KFOLD = 3
NUM_TF = 13
NUM_INITS = 5
EPOCHS = 31
PROX_EPOCHS = 11
VGG_EPOCHS = 31
VGG_PROX_EPOCHS = 11
FULL_TREE_PENS = [0.0001,0.00001]
INPUT_PENS = [0.001,0.0001,0.00001]
VGG_FULL_TREE_PENS = FULL_TREE_PENS
VGG_INPUT_PENS = INPUT_PENS

nest.add(
    'seed',
    range(1),
    label_func=lambda c: 'seed_%d' % c)

nest.add_aggregate('all_tf_res', list)
nest.add(
    'tf_idx',
    np.arange(5),
    label_func=lambda c: 'tf_%d' % c)

nest.add_aggregate('all_res', list)
@nest.add_target_with_env(localenv)
def make_fold_splits(env, outdir, c):
    targets = [
        join(outdir, 'fold_idxs.pkl')]
    cmd = [
        'python make_fold_idxs.py',
        '--seed',
        c['seed'],
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--k-fold',
        KFOLD,
	'--out ${TARGETS[0]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_dnn(env, outdir, c):
    targets = [
        join(outdir, 'dnn_model.h5')]
    cmd = [
        'srun -p restart --cpus-per-task 2',
        'python train_with_labels_wholedatax.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--num-classes 2',
        '--n-hidden 100',
        '--n-layers 5',
        '--dropout-rate 0.15',
        '--epochs',
        EPOCHS,
        '--fit-dnn',
        '--do-binary',
	'--out-model-file ${TARGETS[0]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_dnn(env, outdir, c):
    targets = [
        join(outdir, 'eval_dnn.json')]
    c['all_res'].append(targets[0])
    cmd = [
        'python predict_no_y.py',
        '--tf-idx',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--num-classes 2',
        '--fit-dnn',
        '--n-hidden 100',
        '--n-layers 5',
        '--dropout-rate 0.15',
        '--do-binary',
	'--model-path ${SOURCES[0]}',
	'--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['fit_dnn'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_cnnc(env, outdir, c):
    targets = [
        join(outdir, 'cnnc_model.h5')]
    cmd = [
        'srun --cpus-per-task 4 --exclude=gizmoe1,gizmoe2',
        'python train_with_labels_wholedatax.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--num-classes 2',
        '--epochs',
        EPOCHS,
        '--do-binary',
	'--out-model-file ${TARGETS[0]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_cnnc(env, outdir, c):
    targets = [
        join(outdir, 'eval_cnnc.json')]
    c['all_res'].append(targets[0])
    cmd = [
        'python predict_no_y.py',
        '--tf-idx',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--num-classes 2',
        '--do-binary',
	'--model-path ${SOURCES[0]}',
	'--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['fit_cnnc'],
        ' '.join(map(str, cmd)))


nest.add_aggregate('easier_net_res', list)
nest.add(
    'input_pen',
    INPUT_PENS,
    label_func=lambda c: 'input_pen_%.8f' % c)

nest.add(
    'full_tree_pen',
    FULL_TREE_PENS,
    label_func=lambda c: 'full_tree_pen_%.8f' % c)

@nest.add_target_with_env(localenv)
def fit_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'train_easier_log.txt'),
        join(outdir, 'easier_model.pth')]
    cmd = [
        'srun --cpus-per-task 4 --exclude=gizmoe1,gizmoe2',
        'python train_with_labels_wholedatax_easiernet.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--fold-idxs ${SOURCES[0]}',
        '--num-init',
        NUM_INITS,
        '--n-jobs 4',
        '--num-classes 2',
        '--full-tree-pen',
        c['full_tree_pen'],
        '--input-pen',
        c['input_pen'],
        '--n-hidden 100',
        '--n-layers 5',
        '--max-iters',
        2 * EPOCHS,
        '--max-prox-iters',
        2 * PROX_EPOCHS,
        '--do-binary',
	'--out-model-file ${TARGETS[1]}',
	'--log-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['make_fold_splits'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_easiernet(env, outdir, c):
    targets = [
        join(outdir, 'eval_easiernet_folds.json')]
    c['easier_net_res'].append(targets[0])
    cmd = [
        'python evaluate_easiernet_folds.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--fold-idxs ${SOURCES[0]}',
        '--data-path NEPDF_data',
        '--do-binary',
	'--model-path ${SOURCES[1]}',
	'--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        [c['make_fold_splits'][0], c['fit_easier_net'][1]],
        ' '.join(map(str, cmd)))

nest.pop('input_pen')

@nest.add_target_with_env(localenv)
def select_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'selected_easiernet.json'),
        join(outdir, 'selected_easiernet_log.txt')]
    template = join("experiment_tf", c['easier_net_res'][0].replace(
        	"input_pen_%.8f/full_tree_pen_%.8f/" % (INPUT_PENS[0], FULL_TREE_PENS[0]),
                "input_pen_%.8f/full_tree_pen_%.8f/"))
    cmd = [
        'python collate_best_param.py',
        '--template',
        '"%s"' % template,
        '--input-pen',
        ",".join(map(str, INPUT_PENS)),
        '--full',
        ",".join(map(str, FULL_TREE_PENS)),
        '--seed',
        c['seed'],
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['easier_net_res'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_final_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'train_easier_log.txt'),
        join(outdir, 'easier_model.pth')]
    cmd = [
        'python train_with_labels_wholedatax_easiernet.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--num-init',
        NUM_INITS * 2,
        '--num-classes 2',
        '--max-iters',
        2 * EPOCHS,
        '--max-prox-iters',
        2 * PROX_EPOCHS,
        '--do-binary',
        '--model-fit-params',
        '${SOURCES[0]}',
	'--out-model-file ${TARGETS[1]}',
	'--log-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['select_easier_net'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_easiernet(env, outdir, c):
    targets = [
        join(outdir, 'eval_easiernet.json'),
        join(outdir, 'eval_easiernet_log.txt')]
    c['all_res'].append(targets[0])
    cmd = [
        'python predict_easiernet.py',
        '--tf-idx',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--do-binary',
	'--model-path ${SOURCES[1]}',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_final_easier_net'],
        ' '.join(map(str, cmd)))

nest.add_aggregate('vgg_easier_net_res', list)
nest.add(
    'input_pen',
    VGG_INPUT_PENS,
    label_func=lambda c: 'input_pen_%.8f' % c)

nest.add(
    'full_tree_pen',
    VGG_FULL_TREE_PENS,
    label_func=lambda c: 'full_tree_pen_%.8f' % c)

@nest.add_target_with_env(localenv)
def fit_vgg_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'train_vgg_easier_log.txt'),
        join(outdir, 'vgg_easier_model.pth')]
    cmd = [
        'srun --cpus-per-task 4 --mem=32000 --exclude=gizmoe1,gizmoe2',
        'python train_with_labels_wholedatax_easiernet.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--fold-idxs ${SOURCES[0]}',
        '--is-vgg',
        '--num-init',
        NUM_INITS,
        '--n-jobs 4',
        '--num-classes 2',
        '--full-tree-pen',
        c['full_tree_pen'],
        '--input-pen',
        c['input_pen'],
        '--n-hidden 100',
        '--n-layers 5',
        '--max-iters',
        2 * VGG_EPOCHS,
        '--max-prox-iters',
        2 * VGG_PROX_EPOCHS,
        '--do-binary',
	'--out-model-file ${TARGETS[1]}',
	'--log-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['make_fold_splits'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_vgg_easiernet(env, outdir, c):
    targets = [
        join(outdir, 'eval_vgg_easiernet_folds.json')]
    c['vgg_easier_net_res'].append(targets[0])
    cmd = [
        'python evaluate_easiernet_folds.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--fold-idxs ${SOURCES[0]}',
        '--data-path NEPDF_data',
        '--do-binary',
        '--is-vgg',
	'--model-path ${SOURCES[1]}',
	'--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        [c['make_fold_splits'][0], c['fit_vgg_easier_net'][1]],
        ' '.join(map(str, cmd)))

nest.pop('input_pen')

@nest.add_target_with_env(localenv)
def select_vgg_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'selected_vgg_easiernet.json'),
        join(outdir, 'selected_vgg_easiernet_log.txt')]
    template = join("experiment_tf", c['vgg_easier_net_res'][0].replace(
        	"input_pen_%.8f/full_tree_pen_%.8f/" % (VGG_INPUT_PENS[0], VGG_FULL_TREE_PENS[0]),
                "input_pen_%.8f/full_tree_pen_%.8f/"))
    cmd = [
        'python collate_best_param.py',
        '--template',
        '"%s"' % template,
        '--input-pen',
        ",".join(map(str, VGG_INPUT_PENS)),
        '--full',
        ",".join(map(str, VGG_FULL_TREE_PENS)),
        '--seed',
        c['seed'],
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['vgg_easier_net_res'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_final_vgg_easier_net(env, outdir, c):
    targets = [
        join(outdir, 'train_vgg_easier_log.txt'),
        join(outdir, 'vgg_easier_model.pth')]
    cmd = [
        'srun --cpus-per-task 4 --mem=32000 --exclude=gizmoe1,gizmoe2',
        'python train_with_labels_wholedatax_easiernet.py',
        '--num-tf',
        NUM_TF,
        '--exclude-tf',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--is-vgg',
        '--num-init',
        NUM_INITS * 2,
        '--n-jobs 4',
        '--num-classes 2',
        '--max-iters',
        2 * VGG_EPOCHS,
        '--max-prox-iters',
        2 * VGG_PROX_EPOCHS,
        '--do-binary',
        '--model-fit-params',
        '${SOURCES[0]}',
	'--out-model-file ${TARGETS[1]}',
	'--log-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['select_vgg_easier_net'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def evaluate_vgg_easiernet(env, outdir, c):
    targets = [
        join(outdir, 'eval_vgg_easiernet.json'),
        join(outdir, 'eval_vgg_easiernet_log.txt')]
    c['all_res'].append(targets[0])
    cmd = [
        'python predict_easiernet.py',
        '--tf-idx',
        c['tf_idx'],
        '--data-path NEPDF_data',
        '--do-binary',
        '--is-vgg',
	'--model-path ${SOURCES[1]}',
	'--out-file ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        c['fit_final_vgg_easier_net'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def collate_tf(env, outdir, c):
    targets = [
        join(outdir, 'res.csv')]
    c['all_tf_res'].append(targets[0])
    template = "/".join(c['all_res'][0].split("/")[:-1])
    cmd = [
        'python spinn2/collate_results.py',
        '"experiment_tf/%s/eval_*.json"' % template,
	'${TARGETS[0]}']
    return env.Command(
        targets,
        c['all_res'],
        ' '.join(map(str, cmd)))

nest.pop('tf_idx')

@nest.add_target_with_env(localenv)
def collate_all_tf(env, outdir, c):
    targets = [
        join(outdir, 'res_all_tf.csv')]
    template = c['all_tf_res'][0].replace("tf_0", "tf_*")
    cmd = [
        'python spinn2/collate_results.py',
        '"experiment_tf/%s"' % template,
	'${TARGETS[0]}']
    return env.Command(
        targets,
        c['all_tf_res'],
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def plot_loss(env, outdir, c):
    targets = [
        join(outdir, 'tf_plot.pdf')]
    cmd = [
        'python plot_experiment_tf.py ${SOURCES[0]} ${TARGETS[0]}',
        '--yval test_loss',
        '--ylab "Test loss"'
    ]
    return env.Command(
        targets,
        c['collate_all_tf'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_auc(env, outdir, c):
    targets = [
        join(outdir, 'tf_auc_plot.pdf')]
    cmd = [
        'python plot_experiment_tf.py ${SOURCES[0]} ${TARGETS[0]}'
        '--yval test_auc',
        '--ylab "AUC"']
    return env.Command(
        targets,
        c['collate_all_tf'],
        ' '.join(map(str, cmd)))

